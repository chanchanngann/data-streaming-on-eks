AWSTemplateFormatVersion: '2010-09-09'
Description: "CloudFormation template to create an Amazon EKS cluster"

Parameters:
  VpcBlock:
    Type: String
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
    Default: 192.168.0.0/16

  PublicSubnet01Block:
    Type: String
    Description: CidrBlock for public subnet 01 within the VPC
    Default: 192.168.0.0/18

  PublicSubnet02Block:
    Type: String
    Description: CidrBlock for public subnet 02 within the VPC
    Default: 192.168.64.0/18

  PrivateSubnet01Block:
    Type: String
    Description: CidrBlock for private subnet 01 within the VPC
    Default: 192.168.128.0/18

  PrivateSubnet02Block:
    Type: String
    Description: CidrBlock for private subnet 02 within the VPC
    Default: 192.168.192.0/18

  ClusterName:
    Type: String
    Description: "Name of the EKS cluster"
    Default: "MyEKSCluster"

Resources:

  ###########
  # VPC
  ###########   
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-VPC"

  ###########
  # Internet Gateway
  ###########   
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ###########
  # Route Table
  ###########
  PublicRouteTable:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PublicRouteTable"

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-PrivateRouteTableAZ1"

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub "${ClusterName}-PrivateRouteTableAZ2"

  ###########
  # Public Route
  ########### 

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  ###########
  # Private Route
  ###########   
  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  ###########
  # NATGateway
  ###########   
  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
      - Key: Name
        Value: !Sub '${ClusterName}-NatGatewayAZ1'

  NatGateway02:
    DependsOn:
    - NatGatewayEIP2
    - PublicSubnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
      - Key: Name
        Value: !Sub '${ClusterName}-NatGatewayAZ2'

  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  ###########
  # Public Subnets
  ###########   
  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet01Block
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PublicSubnet01"
        - Key: kubernetes.io/role/elb
          Value: 1 # to let Kubernetes knows to use only the subnets that were specified for external load balancers.
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: shared
  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet02Block
      MapPublicIpOnLaunch: true
      AvailabilityZone: 
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PublicSubnet02"
        - Key: kubernetes.io/role/elb
          Value: 1 # to let Kubernetes knows to use only the subnets that were specified for external load balancers.
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: shared
  ###########
  # Private Subnets
  ###########   
  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet01Block
      AvailabilityZone: 
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PrivateSubnet01"
        - Key: kubernetes.io/role/internal-elb
          Value: 1 # to let Kubernetes and AWS load balancer controller know that the subnets can be used for internal load balancers.
  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet02Block
      AvailabilityZone: 
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-PrivateSubnet02"
        - Key: kubernetes.io/role/internal-elb
          Value: 1 # to let Kubernetes and AWS load balancer controller know that the subnets can be used for internal load balancers.
  ###########
  # Route Table Association
  ###########   
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  #################################
  # Security Group for Cluster
  #################################
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Cluster communication with worker nodes"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName}-ClusterSecurityGroup"

  #################################
  # IAM Role
  #################################
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ClusterName}-cluster-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "eks.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        # - arn:aws:iam::aws:policy/AmazonEKSComputePolicy

  #################################
  # EKSCluster (build before NodeGroup)
  #################################
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet01
          - !Ref PublicSubnet02
          - !Ref PrivateSubnet01
          - !Ref PrivateSubnet02
        SecurityGroupIds:
        - !Ref ControlPlaneSecurityGroup
      RoleArn: !GetAtt [EKSClusterRole, Arn]
    DependsOn: [EKSClusterRole, PublicSubnet01, PublicSubnet02, PrivateSubnet01, PrivateSubnet02, ControlPlaneSecurityGroup]
    
Outputs:
  PublicSubnetIds:
    Description: Public Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02] ]

  PrivateSubnetIds:
    Description: Private Subnets IDs in the VPC
    Value: !Join [ ",", [!Ref PrivateSubnet01, !Ref PrivateSubnet02 ] ]

  ControlPlaneSecurityGroup:
    Description: Security group for the cluster control plane
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup] ]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC

  ClusterName:
    Description: "EKS Cluster Name"
    Value: !Ref ClusterName

  ClusterEndpoint:
    Description: "EKS Cluster API Endpoint"
    Value: !GetAtt EKSCluster.Endpoint

  EKSClusterRoleArn:
    Description: "IAM Role for EKS Cluster"
    Value: !GetAtt EKSClusterRole.Arn
